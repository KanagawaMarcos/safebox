
Marcos-Costa
keyboard_arrow_down
Updateskeyboard_arrow_down
Supportkeyboard_arrow_down

storage
assessment
library_add
group
Projects Add Projects Marcos-Costa/safebox
Set Up Project
CircleCI helps you ship better code, faster. To kick things off, you'll need to add a config.yml file to your project, and start building. After that, we'll start a new build for you each time someone pushes a new commit.

Select from the following options to generate a sample .yml for your project.

Operating System
 Linux macOS
Language
settings Clojuresettings Elixirsettings Gosettings Gradle (Java)settings Maven (Java)settings Nodesettings PHPsettings Pythonsettings Rubysettings Scalasettings Other
Next Steps
You're almost there! We're going to walk you through setting up a configuration file, committing it, and turning on our listener so that CircleCI can test your commits.

Want to skip ahead? Jump right into our documentation, set up a .yml file, and kick off your build with the button below.

1.	
Create a folder named .circleci and add a fileconfig.yml (so that the filepath be in .circleci/config.yml).

2.	
Populate the config.yml with the contents of the sample .yml (shown below).

Copy to clipboard
3.	
Update the sample .yml to reflect your project's configuration.

4.	
Push this change up to GitHub.

5.	
Start building! This will launch your project on CircleCI and make our webhooks listen for updates to your work.

Start building

If you start building before you've added the .yml, there's no need to panic. Our platform will try to run Circle 1.0 build using inference. To get back on track, simply add the .yml and your configuration will do the rest.

Sample .yml File
# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
        
      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            python manage.py test

      - store_artifacts:
          path: test-reports
          destination: test-reports
          
